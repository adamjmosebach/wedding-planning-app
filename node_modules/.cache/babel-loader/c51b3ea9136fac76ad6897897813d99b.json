{"ast":null,"code":"var _jsxFileName = \"/Users/adam_mosebach/Documents/General_Assembly/Projects/Wedding-Planning-App/vendor-connector/src/SpecificVendor.js\";\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport DisplayARecord from './DisplayARecord';\n\nfunction SpecificVendor() {\n  const [vendorTypeSelect, updateVendorTypeSelect] = useState('');\n  const [vendorNameSelect, updateVendorNameSelect] = useState('');\n  const [allRecords, updateAllRecords] = useState([]);\n  const [options, updateOptions] = useState([]); // Get the records from Airtable\n\n  useEffect(() => {\n    async function apiGet() {\n      try {\n        const recordsObj = await axios.get('https://api.airtable.com/v0/appN3Jd5GDuwUR5wG/Table%201?&view=Grid%20view', {\n          headers: {\n            Authorization: `Bearer ${process.env.REACT_APP_AIRTABLE_KEY}`\n          }\n        }); //console.log(recordsObj.data.records)\n\n        updateAllRecords(recordsObj.data.records);\n      } catch (err) {\n        console.log(err);\n      }\n    }\n\n    apiGet();\n  }, []);\n  useEffect(() => {\n    updateVendorNameSelect('');\n    const newOptions = allRecords.reduce((acc, record) => {\n      if (record.fields[vendorTypeSelect] && !acc.includes(record.fields[vendorTypeSelect])) {\n        acc.push(record.fields[vendorTypeSelect]);\n      }\n\n      return acc;\n    }, []);\n    updateOptions(newOptions);\n  }, [vendorTypeSelect]);\n\n  function populateVendorNames() {\n    {\n      /* Populate Vendor Name Dropdown */\n    }\n    return options.length >= 0 && /*#__PURE__*/React.createElement(\"select\", {\n      onChange: e => updateVendorNameSelect(e.target.value),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      value: \"\",\n      selected: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }\n    }, \"Select a Specific Vendor\"), options.map(vendor => /*#__PURE__*/React.createElement(\"option\", {\n      value: vendor,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 34\n      }\n    }, vendor)));\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 5\n    }\n  }, populateVendorNames(), allRecords.map(record => record.fields[vendorTypeSelect] === vendorNameSelect && /*#__PURE__*/React.createElement(DisplayARecord, {\n    record: record,\n    vendorVar: vendorTypeSelect,\n    vendorReview: `${vendorTypeSelect}Review`,\n    vendor: \"\",\n    vendorVisible: \"visible\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }\n  })));\n}\n\nexport default SpecificVendor;","map":{"version":3,"sources":["/Users/adam_mosebach/Documents/General_Assembly/Projects/Wedding-Planning-App/vendor-connector/src/SpecificVendor.js"],"names":["React","useState","useEffect","axios","DisplayARecord","SpecificVendor","vendorTypeSelect","updateVendorTypeSelect","vendorNameSelect","updateVendorNameSelect","allRecords","updateAllRecords","options","updateOptions","apiGet","recordsObj","get","headers","Authorization","process","env","REACT_APP_AIRTABLE_KEY","data","records","err","console","log","newOptions","reduce","acc","record","fields","includes","push","populateVendorNames","length","e","target","value","map","vendor"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport DisplayARecord from './DisplayARecord';\n\nfunction SpecificVendor() {\n  const [vendorTypeSelect, updateVendorTypeSelect] = useState('');\n  const [vendorNameSelect, updateVendorNameSelect] = useState('');\n  const [allRecords, updateAllRecords] = useState([]);\n  const [options, updateOptions] = useState([]);\n\n  // Get the records from Airtable\n  useEffect(() => {\n    async function apiGet() {\n      try {\n        const recordsObj = await axios.get(\n          'https://api.airtable.com/v0/appN3Jd5GDuwUR5wG/Table%201?&view=Grid%20view',\n          {\n            headers: {\n              Authorization: `Bearer ${process.env.REACT_APP_AIRTABLE_KEY}`,\n            },\n          }\n        );\n        //console.log(recordsObj.data.records)\n        updateAllRecords(recordsObj.data.records);\n      } catch (err) {\n        console.log(err);\n      }\n    }\n    apiGet();\n  }, []);\n\n  useEffect(() => {\n    updateVendorNameSelect('')\n    const newOptions = allRecords.reduce((acc, record) => {\n      if (record.fields[vendorTypeSelect] && !acc.includes(record.fields[vendorTypeSelect])) {\n        acc.push(record.fields[vendorTypeSelect]);\n      }\n      return acc;\n    }, []);\n    updateOptions(newOptions);\n  \n  }, [vendorTypeSelect]);\n\n  function populateVendorNames() {\n  \n  \n  \n    {/* Populate Vendor Name Dropdown */ }\n    return options.length >= 0 && (\n      <select onChange={(e) => updateVendorNameSelect(e.target.value)}>\n        <option value='' selected>Select a Specific Vendor</option>\n        {options.map((vendor) => <option value={vendor}>{vendor}</option>)}\n      </select>\n    )\n  }\n\n  return (\n    <div>\n\n      \n    \n      \n      {populateVendorNames()}\n      \n\n      {/* Displaying records that match criteria */}\n      {allRecords.map(\n        (record) =>\n          record.fields[vendorTypeSelect] === vendorNameSelect && (\n            <DisplayARecord record={record} vendorVar={vendorTypeSelect} vendorReview={`${vendorTypeSelect}Review`} vendor='' vendorVisible='visible' />\n          )\n      )}\n    </div>\n  );\n}\n\nexport default SpecificVendor;\n"]},"metadata":{},"sourceType":"module"}